<launch>
  <!-- start up empty world : expand following launch files to respawn gazebo -->
  <!-- include file="$(find pr2_gazebo)/launch/pr2_empty_world.launch" -->
  <!-- include file="$(find gazebo_worlds)/launch/empty_world_paused.launch" -->
  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="true" />
  <arg name="gui" default="false"/>
  <env name="DISPLAY" value=":0.0" if="$(arg gui)"/>
  <env name="DISPLAY" value="" unless="$(arg gui)"/>

  <!-- start empty world -->
  <node name="gazebo" pkg="gazebo_ros" type="gzserver" args="-r worlds/empty.world" respawn="true" output="screen"/>
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>

  <!-- start pr2 robot without image processing-->
  <!-- <include file="$(find pr2_gazebo)/launch/pr2.launch" /> -->
  <!-- Startup PR2 without any mechanism controllers -->
  <!-- <include file="$(find pr2_gazebo)/launch/pr2_no_controllers.launch" pass_all_args="true"/> -->
  <!-- send pr2 urdf to param server -->
  <include file="$(find pr2_description)/robots/upload_pr2.launch" />

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="spawn_pr2_model" pkg="gazebo_ros" type="spawn_model" args="$(optenv ROBOT_INITIAL_POSE) -unpause -urdf -param robot_description -model pr2" respawn="false" output="screen" />

  <!-- default bringup script -->
  <!-- <include file="$(find pr2_gazebo)/launch/pr2_bringup.launch" /> -->
  <!-- Controller Manager -->
  <include file="$(find pr2_controller_manager)/controller_manager.launch" />

  <!-- Fake Calibration -->
  <node pkg="rostopic" type="rostopic" name="fake_joint_calibration"
        args="pub /calibrated std_msgs/Bool true" />

  <!-- Stereo image processing -->
  <!-- <include file="$(find pr2_gazebo)/config/dualstereo_camera.launch" /> -->

  <!-- Start image_proc inside camera namespace-->
  <!-- <include file="$(find pr2_gazebo)/config/r_forearm_cam.launch" /> -->
  <!-- <include file="$(find pr2_gazebo)/config/l_forearm_cam.launch" /> -->

  <!-- diagnostics aggregator -->
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diag_agg" args="Robot" />
  <group ns="diag_agg">
    <include file="$(find pr2_gazebo)/config/pr2_analyzers_simple.launch" />
    <!--
    <include file="$(find pr2_gazebo)/config/pr2_analyzers.launch" />
    -->
  </group>

  <!-- Dashboard aggregation -->
  <node pkg="pr2_dashboard_aggregator" type="dashboard_aggregator.py" name="pr2_dashboard_aggregator"/>

  <!-- Robot pose ekf -->
  <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf" output="screen">
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="publish_tf" value="true"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="true"/>
    <param name="vo_used" value="false"/>
    <remap from="odom" to="base_odometry/odom" />
    <remap from="imu_data" to="torso_lift_imu/data" />
  </node>

  <!-- Base Laser dynamic_reconfigure -->
  <node pkg="gazebo_plugins" type="hokuyo_node" name="base_hokuyo_node">
    <param name="port" type="string" value="/etc/ros/sensors/base_hokuyo" />
    <param name="frame_id" type="string" value="base_laser_link" />
    <param name="min_ang" type="double" value="-2.2689" />
    <param name="max_ang" type="double" value="2.2689" />
    <param name="skip" type="int" value="1" />
    <param name="intensity" value="false" />
  </node>

  <!-- Tilt Laser dynamic_reconfigure -->
  <!-- <node pkg="gazebo_plugins" type="hokuyo_node" name="tilt_hokuyo_node"> -->
  <!--   <param name="port" type="string" value="/etc/ros/sensors/tilt_hokuyo" /> -->
  <!--   <param name="frame_id" type="string" value="laser_tilt_link" /> -->
  <!--   <param name="min_ang" type="double" value="-0.829" /> -->
  <!--   <param name="max_ang" type="double" value="0.829" /> -->
  <!--   <param name="skip" type="int" value="1" /> -->
  <!--   <param name="intensity" value="true" /> -->
  <!-- </node> -->

  <!-- Buffer Server -->
  <node pkg="tf2_ros" type="buffer_server" name="tf2_buffer_server" output="screen">
    <param name="buffer_size" value="120.0"/>
  </node>

  <!-- Spawns the synchronizer -->
  <!-- <node type="camera_synchronizer" name="camera_synchronizer_node" pkg="gazebo_plugins" output="screen" /> -->

  <!-- testing only: simulate torso counter weight spring to reduce load on the torso joint
  <node name="simulate_torso_spring" pkg="pr2_gazebo" type="pr2_simulate_torso_spring.py" respawn="false" output="screen" />
  -->

  <!-- Load and Start Default Controllers -->
  <include file="$(find pr2_controller_configuration_gazebo)/launch/pr2_default_controllers.launch" />

  <!-- fix gripper threshold -->
  <param name="/l_gripper_controller/gripper_action_node/stall_velocity_threshold" value="1.0" /> <!-- 0.33 -->
  <param name="/r_gripper_controller/gripper_action_node/stall_velocity_threshold" value="1.0" />

  <!-- start test -->
  <test test-name="pr2_ri_test" pkg="roseus" type="roseus" retry="1"
	args="$(find pr2eus)/test/pr2-ri-test.l" time-limit="800" />
</launch>
